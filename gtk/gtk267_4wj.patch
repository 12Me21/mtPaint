diff -udpr gtk+-2.6.7_/gdk/win32/gdkcursor-win32.c gtk+-2.6.7/gdk/win32/gdkcursor-win32.c
--- gtk+-2.6.7_/gdk/win32/gdkcursor-win32.c	2004-03-06 06:37:07.000000000 +0300
+++ gtk+-2.6.7/gdk/win32/gdkcursor-win32.c	2010-02-14 21:04:13.000000000 +0300
@@ -41,6 +41,12 @@ _gdk_win32_data_to_wcursor (GdkCursorTyp
   if (i >= G_N_ELEMENTS (cursors) || !cursors[i].name)
     return NULL;
 
+  /* use real win32 cursor if possible */
+  if (cursors[i].builtin)
+    {
+      return LoadCursor (NULL, cursors[i].builtin);
+    }
+
   w = GetSystemMetrics (SM_CXCURSOR);
   h = GetSystemMetrics (SM_CYCURSOR);
 
diff -udpr gtk+-2.6.7_/gdk/win32/gdkevents-win32.c gtk+-2.6.7/gdk/win32/gdkevents-win32.c
--- gtk+-2.6.7_/gdk/win32/gdkevents-win32.c	2005-04-04 03:40:42.000000000 +0400
+++ gtk+-2.6.7/gdk/win32/gdkevents-win32.c	2010-02-14 21:04:13.000000000 +0300
@@ -162,7 +162,8 @@ static HKL latin_locale = NULL;
 #endif
 
 static gboolean in_ime_composition = FALSE;
-static UINT     resize_timer;
+static UINT     modal_timer;
+static UINT     sync_timer = 0;
 
 static int debug_indent = 0;
 
@@ -1841,140 +1842,7 @@ handle_configure_event (MSG       *msg,
     }
 }
 
-static void
-erase_background (GdkWindow *window,
-		  HDC        hdc)
-{
-  HDC bgdc = NULL;
-  HBRUSH hbr = NULL;
-  HPALETTE holdpal = NULL;
-  RECT rect;
-  COLORREF bg;
-  GdkColormap *colormap;
-  GdkColormapPrivateWin32 *colormap_private;
-  int x, y;
-  int x_offset, y_offset;
-  
-  if (((GdkWindowObject *) window)->input_only ||
-      ((GdkWindowObject *) window)->bg_pixmap == GDK_NO_BG ||
-      GDK_WINDOW_IMPL_WIN32 (((GdkWindowObject *) window)->impl)->position_info.no_bg)
-    {
-      return;
-    }
-
-  colormap = gdk_drawable_get_colormap (window);
-
-  if (colormap &&
-      (colormap->visual->type == GDK_VISUAL_PSEUDO_COLOR ||
-       colormap->visual->type == GDK_VISUAL_STATIC_COLOR))
-    {
-      int k;
-	  
-      colormap_private = GDK_WIN32_COLORMAP_DATA (colormap);
-
-      if (!(holdpal = SelectPalette (hdc,  colormap_private->hpal, FALSE)))
-        WIN32_GDI_FAILED ("SelectPalette");
-      else if ((k = RealizePalette (hdc)) == GDI_ERROR)
-	WIN32_GDI_FAILED ("RealizePalette");
-      else if (k > 0)
-	GDK_NOTE (COLORMAP, g_print ("erase_background: realized %p: %d colors\n",
-				     colormap_private->hpal, k));
-    }
-  
-  x_offset = y_offset = 0;
-  while (window && ((GdkWindowObject *) window)->bg_pixmap == GDK_PARENT_RELATIVE_BG)
-    {
-      /* If this window should have the same background as the parent,
-       * fetch the parent. (And if the same goes for the parent, fetch
-       * the grandparent, etc.)
-       */
-      x_offset += ((GdkWindowObject *) window)->x;
-      y_offset += ((GdkWindowObject *) window)->y;
-      window = GDK_WINDOW (((GdkWindowObject *) window)->parent);
-    }
-  
-  if (GDK_WINDOW_IMPL_WIN32 (((GdkWindowObject *) window)->impl)->position_info.no_bg)
-    {
-      /* Improves scolling effect, e.g. main buttons of testgtk */
-      return;
-    }
-
-  GetClipBox (hdc, &rect);
-
-  if (((GdkWindowObject *) window)->bg_pixmap == NULL)
-    {
-      bg = _gdk_win32_colormap_color (GDK_DRAWABLE_IMPL_WIN32 (((GdkWindowObject *) window)->impl)->colormap,
-				      ((GdkWindowObject *) window)->bg_color.pixel);
-      
-      if (!(hbr = CreateSolidBrush (bg)))
-	WIN32_GDI_FAILED ("CreateSolidBrush");
-      else if (!FillRect (hdc, &rect, hbr))
-	WIN32_GDI_FAILED ("FillRect");
-      if (hbr != NULL)
-	DeleteObject (hbr);
-    }
-  else if (((GdkWindowObject *) window)->bg_pixmap != GDK_NO_BG)
-    {
-      GdkPixmap *pixmap = ((GdkWindowObject *) window)->bg_pixmap;
-      GdkPixmapImplWin32 *pixmap_impl = GDK_PIXMAP_IMPL_WIN32 (GDK_PIXMAP_OBJECT (pixmap)->impl);
-      
-      if (x_offset == 0 && y_offset == 0 &&
-	  pixmap_impl->width <= 8 && pixmap_impl->height <= 8)
-	{
-	  if (!(hbr = CreatePatternBrush (GDK_PIXMAP_HBITMAP (pixmap))))
-	    WIN32_GDI_FAILED ("CreatePatternBrush");
-	  else if (!FillRect (hdc, &rect, hbr))
-	    WIN32_GDI_FAILED ("FillRect");
-	  if (hbr != NULL)
-	    DeleteObject (hbr);
-	}
-      else
-	{
-	  HGDIOBJ oldbitmap;
-
-	  if (!(bgdc = CreateCompatibleDC (hdc)))
-	    {
-	      WIN32_GDI_FAILED ("CreateCompatibleDC");
-	      return;
-	    }
-	  if (!(oldbitmap = SelectObject (bgdc, GDK_PIXMAP_HBITMAP (pixmap))))
-	    {
-	      WIN32_GDI_FAILED ("SelectObject");
-	      DeleteDC (bgdc);
-	      return;
-	    }
-	  x = -x_offset;
-	  while (x < rect.right)
-	    {
-	      if (x + pixmap_impl->width >= rect.left)
-		{
-		  y = -y_offset;
-		  while (y < rect.bottom)
-		    {
-		      if (y + pixmap_impl->height >= rect.top)
-			{
-			  if (!BitBlt (hdc, x, y,
-				       pixmap_impl->width, pixmap_impl->height,
-				       bgdc, 0, 0, SRCCOPY))
-			    {
-			      WIN32_GDI_FAILED ("BitBlt");
-			      SelectObject (bgdc, oldbitmap);
-			      DeleteDC (bgdc);
-			      return;
-			    }
-			}
-		      y += pixmap_impl->height;
-		    }
-		}
-	      x += pixmap_impl->width;
-	    }
-	  SelectObject (bgdc, oldbitmap);
-	  DeleteDC (bgdc);
-	}
-    }
-}
-
-static GdkRegion *
+GdkRegion *
 _gdk_win32_hrgn_to_region (HRGN hrgn)
 {
   RGNDATA *rgndata;
@@ -2043,6 +1911,7 @@ handle_wm_paint (MSG        *msg,
   if (GetUpdateRgn (msg->hwnd, hrgn, FALSE) == ERROR)
     {
       WIN32_GDI_FAILED ("GetUpdateRgn");
+      DeleteObject (hrgn);
       return;
     }
 
@@ -2115,6 +1984,7 @@ handle_wm_paint (MSG        *msg,
 	    }
 	}
 
+      DeleteObject (hrgn);
       return;
     }
 
@@ -2138,15 +2008,32 @@ handle_stuff_while_moving_or_resizing (v
 }
 
 static VOID CALLBACK
-resize_timer_proc (HWND     hwnd,
-		   UINT     msg,
-		   UINT     id,
-		   DWORD    time)
+modal_timer_proc (HWND     hwnd,
+		  UINT     msg,
+		  UINT     id,
+		  DWORD    time)
 {
   if (_sizemove_in_progress)
     handle_stuff_while_moving_or_resizing ();
 }
 
+static VOID CALLBACK
+sync_timer_proc (HWND hwnd,
+		 UINT msg,
+		 UINT id,
+		 DWORD time)
+{
+  MSG message;
+  if (PeekMessageW (&message, hwnd, WM_PAINT, WM_PAINT, PM_REMOVE))
+    {
+      return;
+    }
+
+  RedrawWindow (hwnd, NULL, NULL, RDW_INVALIDATE|RDW_UPDATENOW|RDW_ALLCHILDREN);
+
+  KillTimer (hwnd, sync_timer);
+}
+
 static void
 handle_display_change (void)
 {
@@ -2923,11 +2810,17 @@ gdk_event_translate (GdkDisplay *display
       if (GDK_WINDOW_DESTROYED (window))
 	break;
 
-      erase_background (window, (HDC) msg->wParam);
       return_val = TRUE;
       *ret_valp = 1;
       break;
 
+    case WM_SYNCPAINT:
+
+      sync_timer = SetTimer (GDK_WINDOW_HWND (window),
+			     1,
+			     200, sync_timer_proc);
+      break;
+
     case WM_PAINT:
       handle_wm_paint (msg, window, FALSE, NULL);
       break;
@@ -3042,15 +2935,31 @@ gdk_event_translate (GdkDisplay *display
 
     case WM_ENTERSIZEMOVE:
       _sizemove_in_progress = TRUE;
-      resize_timer = SetTimer (NULL, 0, 20, resize_timer_proc);
+      modal_timer = SetTimer (NULL, 0, 20, modal_timer_proc);
       break;
 
     case WM_EXITSIZEMOVE:
       _sizemove_in_progress = FALSE;
-      KillTimer (NULL, resize_timer);
+      KillTimer (NULL, modal_timer);
+      break;
+
+    case WM_ENTERMENULOOP:
+      _sizemove_in_progress = TRUE;
+      modal_timer = SetTimer (NULL, 0, 20, modal_timer_proc);
+      break;
+
+    case WM_EXITMENULOOP:
+      _sizemove_in_progress = FALSE;
+      KillTimer (NULL, modal_timer);
       break;
 
     case WM_WINDOWPOSCHANGED :
+       /* If position and size haven't changed, don't do anything */
+      if (_sizemove_in_progress &&
+ 	  (((WINDOWPOS *)msg->lParam)->flags & SWP_NOMOVE) &&
+ 	  (((WINDOWPOS *)msg->lParam)->flags & SWP_NOSIZE))
+ 	break;
+ 
       /* Once we've entered the moving or sizing modal loop, we won't
        * return to the main loop until we're done sizing or moving.
        */
@@ -3058,55 +2967,14 @@ gdk_event_translate (GdkDisplay *display
 	 GDK_WINDOW_TYPE (window) != GDK_WINDOW_CHILD &&
 	 !GDK_WINDOW_DESTROYED (window))
 	{
-	  RECT client_rect;
-	  POINT point;
-
-	  GetClientRect (msg->hwnd, &client_rect);
-	  point.x = client_rect.left; /* always 0 */
-	  point.y = client_rect.top;
-	  /* top level windows need screen coords */
-	  if (gdk_window_get_parent (window) == _gdk_parent_root)
-	    {
-	      ClientToScreen (msg->hwnd, &point);
-	      point.x += _gdk_offset_x;
-	      point.y += _gdk_offset_y;
-	    }
-  
-	  GDK_WINDOW_IMPL_WIN32 (((GdkWindowObject *) window)->impl)->width = client_rect.right - client_rect.left;
-	  GDK_WINDOW_IMPL_WIN32 (((GdkWindowObject *) window)->impl)->height = client_rect.bottom - client_rect.top;
-	  
-	  ((GdkWindowObject *) window)->x = point.x;
-	  ((GdkWindowObject *) window)->y = point.y;
-
 	  if (((GdkWindowObject *) window)->event_mask & GDK_STRUCTURE_MASK)
 	    {
-	      GdkEvent *event = gdk_event_new (GDK_CONFIGURE);
-	      
-	      event->configure.window = window;
-	      
-	      event->configure.width = client_rect.right - client_rect.left;
-	      event->configure.height = client_rect.bottom - client_rect.top;
-	      
-	      event->configure.x = point.x;
-	      event->configure.y = point.y;
-	      
 	      if (((GdkWindowObject *) window)->resize_count > 1)
 		((GdkWindowObject *) window)->resize_count -= 1;
 	      
-#if 0 /* I don't like calling _gdk_event_func() from here, isn't there
-       * a risk of getting events processed in the wrong order, like
-       * Owen says in the discussion of bug #99540?
-       */
-	      fixup_event (event);
-	      if (_gdk_event_func)
-		(*_gdk_event_func) (event, _gdk_event_data);
-	      gdk_event_free (event);
-#else /* Calling append_event() is slower, but guarantees that events won't
-       * get reordered, I think.
-       */
-	      append_event (display, event);
-#endif
-	      
+ 	      handle_configure_event (msg, window);
+	      g_main_context_iteration (NULL, FALSE);
+
 	      /* Dispatch main loop - to realize resizes... */
 	      handle_stuff_while_moving_or_resizing ();
 	      
@@ -3119,6 +2987,7 @@ gdk_event_translate (GdkDisplay *display
 
     case WM_SIZING:
       GetWindowRect (GDK_WINDOW_HWND (window), &rect);
+      drag = (RECT *) msg->lParam;
       GDK_NOTE (EVENTS, g_print (" %s curr:%s drag:%s",
 				 (msg->wParam == WMSZ_BOTTOM ? "BOTTOM" :
 				  (msg->wParam == WMSZ_BOTTOMLEFT ? "BOTTOMLEFT" :
@@ -3131,13 +3000,13 @@ gdk_event_translate (GdkDisplay *display
 					(msg->wParam == WMSZ_BOTTOMRIGHT ? "BOTTOMRIGHT" :
 					 "???")))))))),
 				 _gdk_win32_rect_to_string (&rect),
-				 _gdk_win32_rect_to_string ((RECT *) msg->lParam)));
+				 _gdk_win32_rect_to_string (drag)));
 
       impl = GDK_WINDOW_IMPL_WIN32 (((GdkWindowObject *) window)->impl);
-      drag = (RECT *) msg->lParam;
       orig_drag = *drag;
       if (impl->hint_flags & GDK_HINT_RESIZE_INC)
 	{
+	  GDK_NOTE (EVENTS, g_print (" (RESIZE_INC)"));
 	  if (impl->hint_flags & GDK_HINT_BASE_SIZE)
 	    {
 	      /* Resize in increments relative to the base size */
@@ -3166,7 +3035,6 @@ gdk_event_translate (GdkDisplay *display
 	      if (drag->bottom == rect.bottom)
 		break;
 	      adjust_drag (&drag->bottom, rect.bottom, impl->hints.height_inc);
-
 	      break;
 
 	    case WMSZ_BOTTOMLEFT:
@@ -3221,7 +3089,7 @@ gdk_event_translate (GdkDisplay *display
 	    {
 	      *ret_valp = TRUE;
 	      return_val = TRUE;
-	      GDK_NOTE (EVENTS, g_print (" (handled RESIZE_INC: drag:%s)",
+	      GDK_NOTE (EVENTS, g_print (" (handled RESIZE_INC: %s)",
 					 _gdk_win32_rect_to_string (drag)));
 	    }
 	}
@@ -3230,18 +3098,105 @@ gdk_event_translate (GdkDisplay *display
 
       if (impl->hint_flags & GDK_HINT_ASPECT)
 	{
-	  gdouble drag_aspect = (gdouble) (drag->right - drag->left) / (drag->bottom - drag->top);
-	  
-	  GDK_NOTE (EVENTS, g_print (" (aspect:%g)", drag_aspect));
-	  if (drag_aspect < impl->hints.min_aspect ||
-	      drag_aspect > impl->hints.max_aspect)
+	  RECT decorated_rect;
+	  RECT undecorated_drag;
+	  int decoration_width, decoration_height;
+	  gdouble drag_aspect;
+	  int drag_width, drag_height, new_width, new_height;
+
+	  GetClientRect (GDK_WINDOW_HWND (window), &rect);
+	  decorated_rect = rect;
+	  _gdk_win32_adjust_client_rect (window, &decorated_rect);
+
+	  /* Set undecorated_drag to the client area being dragged
+	   * out, in screen coordinates.
+	   */
+	  undecorated_drag = *drag;
+	  undecorated_drag.left -= decorated_rect.left - rect.left;
+	  undecorated_drag.right -= decorated_rect.right - rect.right;
+	  undecorated_drag.top -= decorated_rect.top - rect.top;
+	  undecorated_drag.bottom -= decorated_rect.bottom - rect.bottom;
+
+	  decoration_width = (decorated_rect.right - decorated_rect.left) - (rect.right - rect.left);
+	  decoration_height = (decorated_rect.bottom - decorated_rect.top) - (rect.bottom - rect.top);
+
+	  drag_width = undecorated_drag.right - undecorated_drag.left;
+	  drag_height = undecorated_drag.bottom - undecorated_drag.top;
+
+	  drag_aspect = (gdouble) drag_width / drag_height;
+
+	  GDK_NOTE (EVENTS, g_print (" (ASPECT:%g--%g curr: %g)",
+				     impl->hints.min_aspect, impl->hints.max_aspect, drag_aspect));
+
+	  if (drag_aspect < impl->hints.min_aspect)
 	    {
-	      *drag = rect;
-	      *ret_valp = TRUE;
-	      return_val = TRUE;
-	      GDK_NOTE (EVENTS, g_print (" (handled ASPECT: drag:%s)",
-					 _gdk_win32_rect_to_string (drag)));
+	      /* Aspect is getting too narrow */
+	      switch (msg->wParam)
+		{
+		case WMSZ_BOTTOM:
+		case WMSZ_TOP:
+		  /* User drags top or bottom edge outward. Keep height, increase width. */
+		  new_width = impl->hints.min_aspect * drag_height;
+		  drag->left -= (new_width - drag_width) / 2;
+		  drag->right = drag->left + new_width + decoration_width;
+		  break;
+		case WMSZ_BOTTOMLEFT:
+		case WMSZ_BOTTOMRIGHT:
+		  /* User drags bottom-left or bottom-right corner down. Adjust height. */
+		  new_height = drag_width / impl->hints.min_aspect;
+		  drag->bottom = drag->top + new_height + decoration_height;
+		  break;
+		case WMSZ_LEFT:
+		case WMSZ_RIGHT:
+		  /* User drags left or right edge inward. Decrease height */
+		  new_height = drag_width / impl->hints.min_aspect;
+		  drag->top += (drag_height - new_height) / 2;
+		  drag->bottom = drag->top + new_height + decoration_height;
+		  break;
+		case WMSZ_TOPLEFT:
+		case WMSZ_TOPRIGHT:
+		  /* User drags top-left or top-right corner up. Adjust height. */
+		  new_height = drag_width / impl->hints.min_aspect;
+		  drag->top = drag->bottom - new_height - decoration_height;
+		}
+	    }
+	  else if (drag_aspect > impl->hints.max_aspect)
+	    {
+	      /* Aspect is getting too wide */
+	      switch (msg->wParam)
+		{
+		case WMSZ_BOTTOM:
+		case WMSZ_TOP:
+		  /* User drags top or bottom edge inward. Decrease width. */
+		  new_width = impl->hints.max_aspect * drag_height;
+		  drag->left += (drag_width - new_width) / 2;
+		  drag->right = drag->left + new_width + decoration_width;
+		  break;
+		case WMSZ_BOTTOMLEFT:
+		case WMSZ_TOPLEFT:
+		  /* User drags bottom-left or top-left corner left. Adjust width. */
+		  new_width = impl->hints.max_aspect * drag_height;
+		  drag->left = drag->right - new_width - decoration_width;
+		  break;
+		case WMSZ_BOTTOMRIGHT:
+		case WMSZ_TOPRIGHT:
+		  /* User drags bottom-right or top-right corner right. Adjust width. */
+		  new_width = impl->hints.max_aspect * drag_height;
+		  drag->right = drag->left + new_width + decoration_width;
+		  break;
+		case WMSZ_LEFT:
+		case WMSZ_RIGHT:
+		  /* User drags left or right edge outward. Increase height. */
+		  new_height = drag_width / impl->hints.max_aspect;
+		  drag->top -= (new_height - drag_height) / 2;
+		  drag->bottom = drag->top + new_height + decoration_height;
+		  break;
+		}
 	    }
+	  *ret_valp = TRUE;
+	  return_val = TRUE;
+	  GDK_NOTE (EVENTS, g_print (" (handled ASPECT: %s)",
+				     _gdk_win32_rect_to_string (drag)));
 	}
       break;
 
diff -udpr gtk+-2.6.7_/gdk/win32/gdkgeometry-win32.c gtk+-2.6.7/gdk/win32/gdkgeometry-win32.c
--- gtk+-2.6.7_/gdk/win32/gdkgeometry-win32.c	2005-03-13 01:07:34.000000000 +0300
+++ gtk+-2.6.7/gdk/win32/gdkgeometry-win32.c	2010-02-14 21:05:48.000000000 +0300
@@ -108,9 +108,9 @@ gdk_window_scroll (GdkWindow *window,
   GdkRegion *invalidate_region;
   GdkWindowImplWin32 *impl;
   GdkWindowObject *obj;
-  GdkRectangle dest_rect;
   GList *tmp_list;
   GdkWindowParentPos parent_pos;
+  HRGN native_invalidate_region;
   
   g_return_if_fail (GDK_IS_WINDOW (window));
 
@@ -130,22 +130,6 @@ gdk_window_scroll (GdkWindow *window,
   if (obj->update_area)
     gdk_region_offset (obj->update_area, dx, dy);
   
-  invalidate_region = gdk_region_rectangle (&impl->position_info.clip_rect);
-  
-  dest_rect = impl->position_info.clip_rect;
-  dest_rect.x += dx;
-  dest_rect.y += dy;
-  gdk_rectangle_intersect (&dest_rect, &impl->position_info.clip_rect, &dest_rect);
-
-  if (dest_rect.width > 0 && dest_rect.height > 0)
-    {
-      GdkRegion *tmp_region;
-
-      tmp_region = gdk_region_rectangle (&dest_rect);
-      gdk_region_subtract (invalidate_region, tmp_region);
-      gdk_region_destroy (tmp_region);
-    }
-  
   gdk_window_compute_parent_pos (impl, &parent_pos);
 
   parent_pos.x += obj->x;
@@ -156,10 +140,13 @@ gdk_window_scroll (GdkWindow *window,
 
   gdk_window_tmp_unset_bg (window);
 
-  if (!ScrollWindowEx (GDK_WINDOW_HWND (window),
-		       dx, dy, NULL, NULL,
-		       NULL, NULL, SW_SCROLLCHILDREN))
-    WIN32_API_FAILED ("ScrollWindowEx");
+  native_invalidate_region = CreateRectRgn (0, 0, 0, 0);
+  if (native_invalidate_region == NULL)
+    WIN32_API_FAILED ("CreateRectRgn");
+
+  API_CALL (ScrollWindowEx, (GDK_WINDOW_HWND (window),
+			     dx, dy, NULL, NULL,
+			     native_invalidate_region, NULL, SW_SCROLLCHILDREN));
 
   if (impl->position_info.no_bg)
     gdk_window_tmp_reset_bg (window);
@@ -173,8 +160,15 @@ gdk_window_scroll (GdkWindow *window,
       tmp_list = tmp_list->next;
     }
 
-  gdk_window_invalidate_region (window, invalidate_region, TRUE);
-  gdk_region_destroy (invalidate_region);
+  if (native_invalidate_region != NULL)
+    {
+      invalidate_region = _gdk_win32_hrgn_to_region (native_invalidate_region);
+      gdk_region_offset (invalidate_region, impl->position_info.x_offset,
+                         impl->position_info.y_offset);
+      gdk_window_invalidate_region (window, invalidate_region, TRUE);
+      gdk_region_destroy (invalidate_region);
+      GDI_CALL (DeleteObject, (native_invalidate_region));
+    }
 }
 
 void
diff -udpr gtk+-2.6.7_/gdk/win32/gdkprivate-win32.h gtk+-2.6.7/gdk/win32/gdkprivate-win32.h
--- gtk+-2.6.7_/gdk/win32/gdkprivate-win32.h	2005-04-04 03:40:42.000000000 +0400
+++ gtk+-2.6.7/gdk/win32/gdkprivate-win32.h	2010-02-14 21:04:13.000000000 +0300
@@ -360,6 +360,8 @@ HRGN	  _gdk_win32_gdkregion_to_hrgn  (Gd
 					 gint         x_origin,
 					 gint         y_origin);
 
+GdkRegion *_gdk_win32_hrgn_to_region    (HRGN hrgn);
+
 void	_gdk_win32_adjust_client_rect   (GdkWindow *window,
 					 RECT      *RECT);
 
diff -udpr gtk+-2.6.7_/gdk/win32/gdkwindow-win32.c gtk+-2.6.7/gdk/win32/gdkwindow-win32.c
--- gtk+-2.6.7_/gdk/win32/gdkwindow-win32.c	2005-03-12 02:45:53.000000000 +0300
+++ gtk+-2.6.7/gdk/win32/gdkwindow-win32.c	2010-02-14 21:04:13.000000000 +0300
@@ -37,7 +37,13 @@
 #include "gdkprivate-win32.h"
 #include "gdkinput-win32.h"
 
-#if defined __MINGW32__ || (WINVER < 0x0500)
+#if defined __MINGW32__
+#include <w32api.h>
+#endif
+
+#if (defined __W32API_MAJOR_VERSION ? ((__W32API_MAJOR_VERSION < 3) || \
+	((__W32API_MAJOR_VERSION == 3) && (__W32API_MINOR_VERSION < 8))) : \
+	(WINVER < 0x0500))
 typedef struct { 
   DWORD        bV5Size; 
   LONG         bV5Width; 
diff -udpr gtk+-2.6.7_/gdk/win32/xcursors.h gtk+-2.6.7/gdk/win32/xcursors.h
--- gtk+-2.6.7_/gdk/win32/xcursors.h	2001-02-23 06:51:40.000000000 +0300
+++ gtk+-2.6.7/gdk/win32/xcursors.h	2010-02-14 21:04:13.000000000 +0300
@@ -1,357 +1,357 @@
-static const struct { const gchar *name; gint type; guchar width; guchar height; guchar hotx; guchar hoty; guchar *data; } cursors[] = {
-  { "X_cursor", 0, 16, 16, 7, 7, 
+static const struct { const gchar *name; const gchar *builtin; gint type; guchar width; guchar height; guchar hotx; guchar hoty; guchar *data; } cursors[] = {
+  { "X_cursor", NULL, 0, 16, 16, 7, 7, 
     "\125\000\000\125\152\100\001\251\152\220\006\251\152\244\032\251"
     "\032\251\152\244\006\252\252\220\001\252\252\100\000\152\251\000"
     "\000\152\251\000\001\252\252\100\006\252\252\220\032\251\152\244"
     "\152\244\032\251\152\220\006\251\152\100\001\251\125\000\000\125" }, 
-  { "arrow", 2, 16, 16, 14, 1, 
+  { "arrow", IDC_ARROW, 2, 16, 16, 14, 1, 
     "\000\000\000\025\000\000\001\151\000\000\026\251\000\001\152\244"
     "\000\026\252\244\001\152\252\220\006\252\252\220\005\126\252\100"
     "\000\032\252\100\000\152\151\000\001\251\151\000\006\244\144\000"
     "\032\220\144\000\152\100\020\000\031\000\000\000\004\000\000\000" }, 
-  { "based_arrow_down", 4, 10, 12, 4, 10, 
+  { "based_arrow_down", NULL, 4, 10, 12, 4, 10, 
     "\125\125\126\252\251\125\125\126\252\251\125\245\120\032\100\001"
     "\244\001\132\124\031\246\101\152\224\005\245\000\025\100" }, 
-  { "based_arrow_up", 6, 10, 12, 4, 10, 
+  { "based_arrow_up", NULL, 6, 10, 12, 4, 10, 
     "\000\120\000\032\100\026\251\101\232\144\025\245\100\032\100\001"
     "\244\005\132\125\152\252\225\125\125\152\252\225\125\125" }, 
-  { "boat", 8, 16, 9, 14, 4, 
+  { "boat", NULL, 8, 16, 9, 14, 4, 
     "\000\026\000\000\000\152\240\000\201\225\150\000\252\252\252\252"
     "\125\125\126\225\125\125\131\125\125\125\145\100\252\252\244\000"
     "\125\125\120\000" }, 
-  { "bogosity", 10, 15, 16, 7, 7, 
+  { "bogosity", NULL, 10, 15, 16, 7, 7, 
     "\125\105\105\125\251\031\032\225\144\144\145\101\221\221\220\126"
     "\126\126\125\252\252\252\226\145\145\146\131\221\221\231\146\106"
     "\106\145\231\131\131\226\252\252\252\125\225\225\225\006\106\106"
     "\101\131\031\031\126\244\144\152\125\121\121\125" }, 
-  { "bottom_left_corner", 12, 16, 16, 1, 14, 
+  { "bottom_left_corner", IDC_SIZENESW, 12, 16, 16, 1, 14, 
     "\125\000\000\000\151\000\000\000\151\025\000\120\151\031\001\220"
     "\151\031\006\100\151\031\031\000\151\031\144\000\151\031\220\000"
     "\151\032\125\120\151\032\252\220\151\025\125\120\151\000\000\000"
     "\151\125\125\125\152\252\252\251\152\252\252\251\125\125\125\125" }, 
-  { "bottom_right_corner", 14, 16, 16, 14, 14, 
+  { "bottom_right_corner", IDC_SIZENWSE, 14, 16, 16, 14, 14, 
     "\000\000\000\125\000\000\000\151\005\000\124\151\006\100\144\151"
     "\001\220\144\151\000\144\144\151\000\031\144\151\000\006\144\151"
     "\005\125\244\151\006\252\244\151\005\125\124\151\000\000\000\151"
     "\125\125\125\151\152\252\252\251\152\252\252\251\125\125\125\125" }, 
-  { "bottom_side", 16, 15, 16, 7, 14, 
+  { "bottom_side", IDC_SIZENS, 16, 15, 16, 7, 14, 
     "\000\005\100\000\000\031\000\000\000\144\000\000\001\220\000\000"
     "\006\100\000\000\031\000\000\120\144\024\001\221\221\220\001\226"
     "\131\000\001\231\220\000\001\251\000\000\001\220\000\125\125\125"
     "\125\252\252\252\226\252\252\252\125\125\125\125" }, 
-  { "bottom_tee", 18, 16, 12, 8, 10, 
+  { "bottom_tee", NULL, 18, 16, 12, 8, 10, 
     "\000\005\120\000\000\006\220\000\000\006\220\000\000\006\220\000"
     "\000\006\220\000\000\006\220\000\000\006\220\000\000\006\220\000"
     "\125\126\225\125\152\252\252\251\152\252\252\251\125\125\125\125" }, 
-  { "box_spiral", 20, 16, 16, 8, 8, 
+  { "box_spiral", NULL, 20, 16, 16, 8, 8, 
     "\252\252\252\251\225\125\125\125\232\252\252\251\231\125\125\131"
     "\231\252\252\231\231\225\125\231\231\232\251\231\231\231\131\231"
     "\231\231\231\231\231\232\231\231\231\225\131\231\231\252\251\231"
     "\231\125\125\231\232\252\252\231\225\125\125\131\252\252\252\251" }, 
-  { "center_ptr", 22, 12, 16, 5, 1, 
+  { "center_ptr", IDC_UPARROW, 22, 12, 16, 5, 1, 
     "\000\125\000\000\151\000\001\151\100\001\252\100\005\252\120\006"
     "\252\220\026\252\224\032\252\244\132\252\245\151\151\151\145\151"
     "\131\124\151\025\000\151\000\000\151\000\000\151\000\000\125\000" }, 
-  { "circle", 24, 16, 16, 8, 8, 
+  { "circle", NULL, 24, 16, 16, 8, 8, 
     "\000\025\124\000\001\132\245\100\005\252\252\120\026\252\252\224"
     "\032\245\132\244\132\220\006\245\152\100\001\251\152\100\001\251"
     "\152\100\001\251\152\100\001\251\132\220\006\245\032\245\132\244"
     "\026\252\252\224\005\252\252\120\001\132\245\100\000\025\124\000" }, 
-  { "clock", 26, 15, 16, 6, 3, 
+  { "clock", IDC_APPSTARTING, 26, 15, 16, 6, 3, 
     "\032\252\252\101\241\252\012\112\030\132\112\141\206\222\111\206"
     "\251\131\046\006\124\220\232\006\251\012\132\252\252\244\142\032"
     "\110\221\210\151\042\106\041\244\211\030\232\246\044\242\032\110"
     "\246\250\024\052\232\252\252\252\152\252\252\251" }, 
-  { "coffee_mug", 28, 16, 16, 7, 9, 
+  { "coffee_mug", NULL, 28, 16, 16, 7, 9, 
     "\002\252\252\000\011\125\125\200\051\125\125\151\046\125\126\231"
     "\145\252\251\131\245\125\125\131\245\125\125\131\145\125\125\131"
     "\045\125\125\131\046\226\126\231\151\231\231\231\251\232\231\231"
     "\246\231\226\231\145\125\125\131\045\125\125\131\012\252\252\240" }, 
-  { "cross", 30, 16, 16, 7, 7, 
-    "\000\025\120\000\000\031\220\000\000\031\220\000\000\031\220\000"
-    "\000\031\220\000\125\131\225\125\125\131\225\125\252\251\252\252"
-    "\125\125\125\125\252\251\252\252\000\031\220\000\000\031\220\000"
-    "\000\031\220\000\000\031\220\000\000\031\220\000\000\031\220\000" }, 
-  { "cross_reverse", 32, 16, 15, 7, 7, 
+  { "cross", IDC_CROSS, 30, 16, 15, 7, 7, 
+    "\000\031\220\000\000\031\220\000\000\031\220\000\000\031\220\000"
+    "\000\031\220\000\125\131\225\125\252\251\252\252\125\125\125\125"
+    "\252\251\252\252\125\131\225\125\000\031\220\000\000\031\220\000"
+    "\000\031\220\000\000\031\220\000\000\031\220\000" }, 
+  { "cross_reverse", NULL, 32, 16, 15, 7, 7, 
     "\044\030\220\140\211\030\221\211\142\130\226\044\030\230\230\220"
     "\006\050\242\100\125\210\211\125\252\240\052\252\000\001\000\000"
     "\252\240\052\252\125\210\211\125\006\050\242\100\030\230\230\220"
     "\142\130\226\044\211\030\221\211\044\030\220\140" }, 
-  { "crosshair", 34, 16, 16, 7, 7, 
-    "\000\005\100\000\000\006\100\000\000\006\100\000\000\006\100\000"
-    "\000\006\100\000\000\006\100\000\125\126\125\125\125\126\125\125"
-    "\252\251\252\252\000\006\100\000\000\006\100\000\000\006\100\000"
-    "\000\006\100\000\000\006\100\000\000\006\100\000\000\006\100\000" }, 
-  { "diamond_cross", 36, 16, 16, 7, 7, 
-    "\000\025\120\000\000\131\224\000\001\151\245\000\005\211\211\100"
-    "\026\011\202\120\130\011\200\224\145\131\225\145\252\250\252\251"
-    "\125\125\125\125\250\011\200\250\045\011\201\140\011\111\205\200"
-    "\002\131\226\000\000\231\230\000\000\051\240\000\000\011\200\000" }, 
-  { "dot", 38, 12, 12, 6, 6, 
+  { "crosshair", IDC_CROSS, 34, 16, 15, 7, 7, 
+    "\000\006\100\000\000\006\100\000\000\006\100\000\000\006\100\000"
+    "\000\006\100\000\000\006\100\000\125\126\125\125\252\251\252\252"
+    "\125\126\125\125\000\006\100\000\000\006\100\000\000\006\100\000"
+    "\000\006\100\000\000\006\100\000\000\006\100\000" }, 
+  { "diamond_cross", NULL, 36, 15, 15, 7, 7, 
+    "\000\031\220\000\001\246\220\000\031\231\220\001\222\141\220\031"
+    "\011\201\221\220\046\001\232\252\232\252\225\125\025\125\252\251"
+    "\252\251\220\046\001\221\220\230\031\001\222\141\220\001\231\231"
+    "\000\001\246\220\000\001\231\000\000" }, 
+  { "dot", NULL, 38, 12, 12, 6, 6, 
     "\001\125\100\025\252\124\032\252\244\132\252\245\152\252\251\152"
     "\252\251\152\252\251\152\252\251\132\252\245\032\252\244\025\252"
     "\124\001\125\100" }, 
-  { "dotbox", 40, 14, 14, 7, 6, 
+  { "dotbox", NULL, 40, 14, 14, 7, 6, 
     "\125\125\125\126\252\252\251\145\125\125\226\100\000\031\144\000"
     "\001\226\101\124\031\144\032\101\226\101\244\031\144\025\101\226"
     "\100\000\031\144\000\001\226\125\125\131\152\252\252\225\125\125"
     "\125" }, 
-  { "double_arrow", 42, 12, 16, 6, 8, 
+  { "double_arrow", IDC_SIZENS, 42, 12, 16, 6, 8, 
     "\000\125\000\001\151\100\005\252\120\026\252\224\132\151\245\151"
     "\151\151\125\151\125\000\151\000\000\151\000\125\151\125\151\151"
     "\151\132\151\245\026\252\224\005\252\120\001\151\100\000\125\000" }, 
-  { "draft_large", 44, 15, 16, 14, 0, 
-    "\000\000\000\024\000\000\005\140\000\001\132\100\000\126\250\000"
-    "\025\252\200\005\152\252\001\132\252\240\006\252\252\200\000\026"
-    "\250\000\001\146\240\000\026\032\000\001\140\150\000\026\001\200"
-    "\001\140\006\000\006\000\000\000\040\000\000\000" }, 
-  { "draft_small", 46, 15, 15, 14, 0, 
+  { "draft_large", NULL, 44, 15, 15, 14, 0, 
+    "\000\000\000\030\000\000\006\220\000\001\252\100\000\152\244\000"
+    "\032\252\200\006\252\251\001\252\252\240\005\125\252\100\000\031"
+    "\250\000\001\226\220\000\031\032\000\001\220\144\000\031\001\200"
+    "\001\220\005\000\011\000\000\000\000" }, 
+  { "draft_small", NULL, 46, 15, 15, 14, 0, 
     "\000\000\000\030\000\000\006\220\000\001\252\000\000\152\244\000"
     "\032\252\200\000\125\251\000\000\031\240\000\001\226\100\000\031"
     "\030\000\001\220\100\000\031\000\000\001\220\000\000\031\000\000"
     "\001\220\000\000\011\000\000\000\000" }, 
-  { "draped_box", 48, 14, 14, 7, 6, 
+  { "draped_box", NULL, 48, 14, 14, 7, 6, 
     "\125\125\125\126\252\252\251\140\145\220\226\032\132\111\146\220"
     "\151\226\244\121\251\145\032\105\226\121\244\131\152\105\032\226"
     "\151\006\231\141\245\244\226\006\131\011\152\252\252\225\125\125"
     "\125" }, 
-  { "exchange", 50, 16, 16, 7, 7, 
+  { "exchange", NULL, 50, 16, 16, 7, 7, 
     "\120\025\124\000\144\152\251\000\151\252\252\100\152\245\126\220"
     "\145\220\001\220\145\245\000\120\152\251\000\000\125\125\000\000"
     "\000\000\125\125\000\000\152\251\005\000\032\131\006\100\006\131"
     "\006\225\132\251\001\252\252\151\000\152\251\031\000\025\124\005" }, 
-  { "fleur", 52, 16, 16, 8, 8, 
+  { "fleur", IDC_SIZEALL, 52, 16, 16, 8, 8, 
     "\000\005\120\000\000\006\224\000\000\032\244\000\000\152\251\000"
     "\001\026\224\100\006\106\221\220\132\126\225\245\152\252\252\251"
     "\152\252\252\251\132\126\225\245\006\106\221\220\001\026\224\100"
     "\000\152\251\000\000\032\244\000\000\006\220\000\000\005\120\000" }, 
-  { "gobbler", 54, 16, 16, 14, 3, 
-    "\000\000\152\220\000\000\152\120\220\000\132\132\226\252\232\125"
-    "\252\252\252\125\252\251\132\120\252\245\132\120\151\125\132\220"
-    "\125\125\252\120\126\252\251\120\025\225\125\100\001\225\125\000"
-    "\001\220\000\000\001\220\000\000\006\251\000\000\005\125\000\000" }, 
-  { "gumby", 56, 16, 16, 2, 0, 
+  { "gobbler", NULL, 54, 16, 16, 14, 2, 
+    "\000\000\125\120\000\000\152\220\120\000\152\125\225\125\132\132"
+    "\226\252\232\125\252\252\252\120\252\251\132\120\252\245\132\120"
+    "\151\125\132\220\125\125\252\120\026\252\251\100\001\225\125\000"
+    "\001\220\000\000\001\220\000\000\005\225\000\000\006\251\000\000" }, 
+  { "gumby", NULL, 56, 16, 16, 2, 0, 
     "\012\252\000\000\122\125\200\000\244\225\140\000\251\231\230\000"
     "\244\225\130\000\244\232\231\120\252\225\132\244\132\225\132\252"
     "\005\225\130\152\000\225\130\152\000\226\131\252\000\226\130\152"
     "\000\226\130\025\002\126\126\000\011\126\125\200\012\250\252\200" }, 
-  { "hand1", 58, 13, 16, 12, 0, 
+  { "hand1", IDC_HAND, 58, 13, 16, 12, 0, 
     "\000\000\006\200\000\032\240\000\152\220\000\152\220\000\152\220"
     "\000\152\251\001\152\252\221\232\252\224\252\252\251\046\252\252"
     "\105\132\252\101\126\252\100\226\145\100\051\131\000\006\231\000"
     "\000\151\000\000" }, 
-  { "hand2", 60, 16, 16, 0, 1, 
+  { "hand2", IDC_HAND, 60, 16, 16, 0, 1, 
     "\025\125\100\000\152\252\220\000\225\125\144\000\152\251\131\000"
     "\026\125\126\100\001\251\126\100\006\125\126\100\001\251\131\220"
     "\006\125\145\144\001\245\225\131\000\132\125\144\000\031\145\220"
     "\000\006\126\100\000\001\231\000\000\000\144\000\000\000\020\000" }, 
-  { "heart", 62, 15, 14, 6, 8, 
+  { "heart", NULL, 62, 15, 14, 6, 8, 
     "\012\250\252\200\245\152\126\212\100\144\006\244\000\100\006\220"
     "\000\000\032\100\000\000\151\000\104\001\251\000\100\032\051\000"
     "\001\240\051\000\032\000\051\001\240\000\051\132\000\000\051\240"
     "\000\000\052\000\000" }, 
-  { "icon", 64, 16, 16, 8, 8, 
+  { "icon", NULL, 64, 16, 16, 8, 8, 
     "\252\252\252\252\246\146\146\146\231\231\231\232\246\146\146\146"
     "\231\125\125\232\246\125\125\146\231\125\125\232\246\125\125\146"
     "\231\125\125\232\246\125\125\146\231\125\125\232\246\125\125\146"
     "\231\231\231\232\246\146\146\146\231\231\231\232\252\252\252\252" }, 
-  { "iron_cross", 66, 16, 16, 8, 7, 
+  { "iron_cross", NULL, 66, 16, 16, 8, 7, 
     "\005\125\125\120\032\252\252\244\026\252\252\224\145\252\252\131"
     "\151\152\251\151\152\132\245\251\152\226\226\251\152\252\252\251"
     "\152\252\252\251\152\226\226\251\152\132\245\251\151\152\251\151"
     "\145\252\252\131\026\252\252\224\032\252\252\244\005\125\125\120" }, 
-  { "left_ptr", 68, 10, 16, 1, 1, 
+  { "left_ptr", IDC_ARROW, 68, 10, 16, 1, 1, 
     "\120\000\006\100\000\151\000\006\244\000\152\220\006\252\100\152"
     "\251\006\252\244\152\252\226\252\125\151\244\006\106\220\120\151"
     "\000\001\244\000\032\100\000\120" }, 
-  { "left_side", 70, 16, 15, 1, 7, 
+  { "left_side", IDC_SIZEWE, 70, 16, 15, 1, 7, 
     "\125\000\000\000\151\000\000\000\151\000\120\000\151\001\220\000"
     "\151\006\100\000\151\031\000\000\151\145\125\125\151\252\252\251"
     "\151\145\125\125\151\031\000\000\151\006\100\000\151\001\220\000"
     "\151\000\120\000\151\000\000\000\125\000\000\000" }, 
-  { "left_tee", 72, 12, 16, 1, 8, 
+  { "left_tee", NULL, 72, 12, 16, 1, 8, 
     "\125\000\000\151\000\000\151\000\000\151\000\000\151\000\000\151"
     "\000\000\151\125\125\152\252\251\152\252\251\151\125\125\151\000"
     "\000\151\000\000\151\000\000\151\000\000\151\000\000\125\000\000" }, 
-  { "leftbutton", 74, 16, 16, 8, 8, 
+  { "leftbutton", NULL, 74, 16, 16, 8, 8, 
     "\025\125\125\120\152\252\252\244\152\252\252\244\145\145\145\144"
     "\145\146\146\144\145\146\146\144\145\146\146\144\145\146\146\144"
     "\145\145\145\144\152\252\252\244\152\252\252\244\152\252\252\244"
     "\152\252\252\244\152\252\252\244\152\252\252\244\025\125\125\120" }, 
-  { "ll_angle", 76, 12, 12, 1, 10, 
+  { "ll_angle", NULL, 76, 12, 12, 1, 10, 
     "\125\000\000\151\000\000\151\000\000\151\000\000\151\000\000\151"
     "\000\000\151\000\000\151\000\000\151\125\125\152\252\251\152\252"
     "\251\125\125\125" }, 
-  { "lr_angle", 78, 12, 12, 10, 10, 
+  { "lr_angle", NULL, 78, 12, 12, 10, 10, 
     "\000\000\125\000\000\151\000\000\151\000\000\151\000\000\151\000"
     "\000\151\000\000\151\000\000\151\125\125\151\152\252\251\152\252"
     "\251\125\125\125" }, 
-  { "man", 80, 16, 16, 14, 5, 
+  { "man", NULL, 80, 16, 16, 14, 5, 
     "\001\132\224\000\006\251\252\000\005\131\225\100\220\006\100\004"
     "\144\032\220\052\031\145\145\232\006\246\152\105\001\146\145\000"
     "\000\045\144\000\000\031\220\000\000\145\144\000\001\226\131\000"
     "\006\131\226\100\026\144\146\120\152\220\032\245\252\220\032\252" }, 
-  { "middlebutton", 82, 16, 16, 8, 8, 
+  { "middlebutton", NULL, 82, 16, 16, 8, 8, 
     "\025\125\125\120\152\252\252\244\152\252\252\244\145\145\145\144"
     "\146\145\146\144\146\145\146\144\146\145\146\144\146\145\146\144"
     "\145\145\145\144\152\252\252\244\152\252\252\244\152\252\252\244"
     "\152\252\252\244\152\252\252\244\152\252\252\244\025\125\125\120" }, 
-  { "mouse", 84, 16, 16, 4, 1, 
+  { "mouse", NULL, 84, 16, 16, 4, 1, 
     "\000\125\100\000\001\124\000\000\000\152\000\000\000\045\000\000"
     "\025\151\125\100\125\132\125\120\152\252\252\225\225\125\125\145"
     "\232\132\132\151\232\132\132\151\232\132\132\151\225\125\125\151"
     "\005\125\125\051\001\125\124\000\000\225\140\000\000\052\200\000" }, 
-  { "pencil", 86, 13, 16, 11, 15, 
+  { "pencil", NULL, 86, 13, 16, 11, 15, 
     "\132\220\000\031\131\000\006\126\220\000\145\230\000\012\246\100"
     "\001\225\140\000\031\131\000\002\125\200\000\145\144\000\012\126"
     "\000\001\225\220\000\031\131\000\001\252\100\000\032\220\000\001"
     "\244\000\000\031" }, 
-  { "pirate", 88, 16, 16, 7, 12, 
+  { "pirate", IDC_NO, 88, 16, 16, 7, 12, 
     "\000\152\220\000\001\252\244\000\006\252\251\000\032\132\132\100"
     "\032\132\132\100\006\252\251\000\001\252\244\000\100\152\220\001"
     "\200\152\220\045\220\152\220\151\145\032\101\220\032\200\052\100"
     "\000\052\200\000\026\252\250\011\252\125\132\251\225\000\005\144" }, 
-  { "plus", 90, 12, 12, 5, 6, 
+  { "plus", NULL, 90, 12, 12, 5, 6, 
     "\000\125\000\000\151\000\000\151\000\000\151\000\125\151\125\152"
     "\252\251\152\252\251\125\151\125\000\151\000\000\151\000\000\151"
     "\000\000\125\000" }, 
-  { "question_arrow", 92, 11, 16, 5, 8, 
+  { "question_arrow", IDC_HELP, 92, 11, 16, 5, 8, 
     "\002\252\000\052\252\002\245\152\032\125\151\152\001\245\151\012"
     "\221\124\251\101\152\224\001\251\100\006\144\000\031\220\002\246"
     "\240\026\232\120\026\245\000\026\120\000\025\000" }, 
-  { "right_ptr", 94, 10, 16, 8, 1, 
+  { "right_ptr", NULL, 94, 10, 16, 8, 1, 
     "\000\000\120\000\031\000\006\220\001\251\000\152\220\032\251\006"
     "\252\221\252\251\152\252\225\132\251\001\246\220\151\031\006\220"
     "\121\244\000\032\100\000\120\000" }, 
-  { "right_side", 96, 16, 15, 14, 7, 
+  { "right_side", IDC_SIZEWE, 96, 16, 15, 14, 7, 
     "\000\000\000\125\000\000\000\151\000\005\000\151\000\006\100\151"
     "\000\001\220\151\000\000\144\151\125\125\131\151\152\252\252\151"
     "\125\125\131\151\000\000\144\151\000\001\220\151\000\006\100\151"
     "\000\005\000\151\000\000\000\151\000\000\000\125" }, 
-  { "right_tee", 98, 12, 16, 10, 8, 
+  { "right_tee", NULL, 98, 12, 16, 10, 8, 
     "\000\000\125\000\000\151\000\000\151\000\000\151\000\000\151\000"
     "\000\151\125\125\151\152\252\251\152\252\251\125\125\151\000\000"
     "\151\000\000\151\000\000\151\000\000\151\000\000\151\000\000\125" }, 
-  { "rightbutton", 100, 16, 16, 8, 8, 
+  { "rightbutton", NULL, 100, 16, 16, 8, 8, 
     "\025\125\125\120\152\252\252\244\152\252\252\244\145\145\145\144"
     "\146\146\145\144\146\146\145\144\146\146\145\144\146\146\145\144"
     "\145\145\145\144\152\252\252\244\152\252\252\244\152\252\252\244"
     "\152\252\252\244\152\252\252\244\152\252\252\244\025\125\125\120" }, 
-  { "rtl_logo", 102, 16, 16, 7, 7, 
+  { "rtl_logo", NULL, 102, 16, 16, 7, 7, 
     "\125\125\125\125\152\252\252\251\145\125\131\131\144\000\031\031"
     "\145\125\131\031\152\252\251\031\145\145\131\031\144\144\031\031"
     "\144\144\031\031\144\145\131\131\144\152\252\251\144\145\125\131"
     "\144\144\000\031\145\145\125\131\152\252\252\251\125\125\125\125" }, 
-  { "sailboat", 104, 16, 16, 8, 0, 
+  { "sailboat", NULL, 104, 16, 16, 8, 0, 
     "\000\000\120\000\000\000\124\000\000\001\144\000\000\005\145\000"
     "\000\006\151\000\000\026\151\000\000\032\151\100\000\132\152\100"
     "\000\152\152\100\001\152\152\120\001\252\152\220\005\252\152\220"
     "\006\252\152\225\026\252\152\245\132\251\132\200\025\125\124\000" }, 
-  { "sb_down_arrow", 106, 9, 16, 4, 15, 
+  { "sb_down_arrow", NULL, 106, 9, 16, 4, 15, 
     "\005\124\001\231\000\146\100\031\220\006\144\001\231\000\146\100"
     "\031\220\006\144\001\231\005\146\125\131\225\052\252\002\252\000"
     "\052\000\002\000" }, 
-  { "sb_h_double_arrow", 108, 15, 9, 7, 4, 
+  { "sb_h_double_arrow", IDC_SIZEWE, 108, 15, 9, 7, 4, 
     "\001\100\005\000\031\000\031\001\245\125\151\032\252\252\251\252"
     "\125\126\251\252\252\252\221\245\125\151\001\220\001\220\001\100"
     "\005\000" }, 
-  { "sb_left_arrow", 110, 16, 9, 0, 4, 
+  { "sb_left_arrow", NULL, 110, 16, 9, 0, 4, 
     "\000\120\000\000\001\220\000\000\006\225\125\125\032\252\252\252"
     "\152\225\125\125\032\252\252\252\006\225\125\125\001\220\000\000"
     "\000\120\000\000" }, 
-  { "sb_right_arrow", 112, 16, 9, 15, 4, 
+  { "sb_right_arrow", NULL, 112, 16, 9, 15, 4, 
     "\000\000\005\000\000\000\006\100\125\125\126\220\252\252\252\244"
     "\125\125\126\251\252\252\252\244\125\125\126\220\000\000\006\100"
     "\000\000\005\000" }, 
-  { "sb_up_arrow", 114, 9, 16, 4, 0, 
+  { "sb_up_arrow", NULL, 114, 9, 16, 4, 0, 
     "\000\200\000\250\000\252\200\252\250\126\145\125\231\120\146\100"
     "\031\220\006\144\001\231\000\146\100\031\220\006\144\001\231\000"
     "\146\100\025\120" }, 
-  { "sb_v_double_arrow", 116, 9, 15, 4, 7, 
+  { "sb_v_double_arrow", IDC_SIZENS, 116, 9, 15, 4, 7, 
     "\001\220\001\251\001\252\221\252\251\126\145\101\231\000\146\100"
     "\031\220\006\144\001\231\005\146\125\252\251\032\251\001\251\000"
     "\031\000" }, 
-  { "shuttle", 118, 16, 16, 11, 0, 
+  { "shuttle", NULL, 118, 16, 16, 11, 0, 
     "\000\000\006\100\000\000\032\220\000\000\152\244\000\000\251\252"
     "\000\030\251\252\000\144\251\252\001\224\251\252\001\224\251\252"
     "\001\224\251\252\001\224\251\252\006\224\251\252\032\224\251\252"
     "\152\250\251\252\025\244\145\144\000\120\032\244\000\000\006\220" }, 
-  { "sizing", 120, 16, 16, 8, 8, 
+  { "sizing", IDC_SIZENWSE, 120, 16, 16, 8, 8, 
     "\125\125\120\000\152\252\220\000\145\125\120\000\144\000\000\000"
     "\144\125\125\000\144\152\251\000\144\145\131\025\144\144\031\031"
     "\144\144\031\031\124\145\131\031\000\152\251\031\000\125\126\131"
     "\000\000\001\231\000\005\125\151\000\006\252\251\000\005\125\125" }, 
-  { "spider", 122, 16, 16, 6, 7, 
+  { "spider", NULL, 122, 16, 16, 6, 7, 
     "\030\000\002\100\006\000\011\000\002\000\010\000\001\200\044\000"
     "\100\225\140\001\220\152\220\152\050\152\222\220\006\252\251\000"
     "\006\252\250\000\050\152\226\200\220\152\220\152\100\225\140\001"
     "\001\200\040\000\002\100\030\000\006\000\011\000\030\000\002\100" }, 
-  { "spraycan", 124, 12, 16, 10, 2, 
+  { "spraycan", NULL, 124, 12, 16, 10, 2, 
     "\000\000\012\001\100\205\006\230\112\012\244\205\032\144\112\152"
     "\251\000\145\131\000\152\131\000\146\131\000\152\131\000\146\131"
     "\000\152\131\000\152\131\000\145\131\000\145\131\000\152\251\000" }, 
-  { "star", 126, 16, 16, 7, 7, 
+  { "star", NULL, 126, 16, 16, 7, 7, 
     "\000\002\000\000\000\011\200\000\000\011\200\000\000\030\220\000"
     "\000\044\140\000\000\140\044\000\001\140\045\100\132\202\012\224"
     "\240\000\000\051\132\200\012\224\005\202\011\100\006\011\202\100"
     "\030\044\140\220\030\220\030\220\032\100\006\220\031\000\001\220" }, 
-  { "target", 128, 16, 14, 7, 7, 
-    "\000\032\220\000\000\252\250\000\002\245\152\000\012\120\026\200"
-    "\051\000\001\240\244\002\000\150\240\011\200\051\240\024\120\051"
-    "\140\005\100\045\130\001\000\224\026\000\002\120\005\240\051\100"
-    "\001\132\225\000\000\025\120\000" }, 
-  { "tcross", 130, 15, 15, 7, 7, 
+  { "target", NULL, 128, 16, 15, 7, 7, 
+    "\000\025\120\000\000\132\224\000\001\252\251\000\006\240\052\100"
+    "\032\000\002\220\150\001\000\244\240\006\100\051\240\030\220\051"
+    "\240\006\100\051\150\001\000\244\032\000\002\220\006\240\052\100"
+    "\001\252\251\000\000\132\224\000\000\025\120\000" }, 
+  { "tcross", IDC_CROSS, 130, 15, 15, 7, 7, 
     "\000\005\100\000\000\031\000\000\000\144\000\000\001\220\000\000"
     "\006\100\000\000\031\000\005\125\145\125\132\252\252\251\125\126"
     "\125\124\000\031\000\000\000\144\000\000\001\220\000\000\006\100"
     "\000\000\031\000\000\000\124\000\000" }, 
-  { "top_left_arrow", 132, 16, 16, 1, 1, 
+  { "top_left_arrow", NULL, 132, 16, 16, 1, 1, 
     "\124\000\000\000\151\100\000\000\152\224\000\000\032\251\100\000"
     "\032\252\224\000\006\252\251\120\006\252\252\220\001\252\225\120"
     "\001\252\220\000\000\151\144\000\000\151\031\000\000\031\006\100"
     "\000\031\001\220\000\025\000\144\000\000\000\031\000\000\000\005" }, 
-  { "top_left_corner", 134, 16, 16, 1, 1, 
+  { "top_left_corner", IDC_SIZENWSE, 134, 16, 16, 1, 1, 
     "\125\125\125\125\152\252\252\251\152\252\252\251\151\125\125\125"
     "\151\000\000\000\151\025\125\120\151\032\252\220\151\032\125\120"
     "\151\031\220\000\151\031\144\000\151\031\031\000\151\031\006\100"
     "\151\031\001\220\151\025\000\120\151\000\000\000\125\000\000\000" }, 
-  { "top_right_corner", 136, 16, 16, 14, 1, 
+  { "top_right_corner", IDC_SIZENESW, 136, 16, 16, 14, 1, 
     "\125\125\125\125\152\252\252\251\152\252\252\251\125\125\125\151"
     "\000\000\000\151\005\125\124\151\006\252\244\151\005\125\244\151"
     "\000\006\144\151\000\031\144\151\000\144\144\151\001\220\144\151"
     "\006\100\144\151\005\000\124\151\000\000\000\151\000\000\000\125" }, 
-  { "top_side", 138, 15, 16, 7, 1, 
+  { "top_side", IDC_SIZENS, 138, 15, 16, 7, 1, 
     "\125\125\125\125\252\252\252\226\252\252\252\125\125\125\125\000"
     "\006\100\000\000\152\100\000\006\146\100\000\145\226\100\006\106"
     "\106\100\024\031\005\000\000\144\000\000\001\220\000\000\006\100"
     "\000\000\031\000\000\000\144\000\000\001\120\000" }, 
-  { "top_tee", 140, 16, 12, 8, 1, 
+  { "top_tee", NULL, 140, 16, 12, 8, 1, 
     "\125\125\125\125\152\252\252\251\152\252\252\251\125\126\225\125"
     "\000\006\220\000\000\006\220\000\000\006\220\000\000\006\220\000"
     "\000\006\220\000\000\006\220\000\000\006\220\000\000\005\120\000" }, 
-  { "trek", 142, 9, 16, 4, 0, 
+  { "trek", NULL, 142, 9, 16, 4, 0, 
     "\001\220\000\124\000\152\100\152\244\152\252\132\232\226\252\244"
     "\152\244\006\244\004\144\106\152\145\246\151\145\226\131\021\226"
     "\104\145\220\031" }, 
-  { "ul_angle", 144, 12, 12, 1, 1, 
+  { "ul_angle", NULL, 144, 12, 12, 1, 1, 
     "\125\125\125\152\252\251\152\252\251\151\125\125\151\000\000\151"
     "\000\000\151\000\000\151\000\000\151\000\000\151\000\000\151\000"
     "\000\125\000\000" }, 
-  { "umbrella", 146, 16, 16, 8, 2, 
+  { "umbrella", NULL, 146, 16, 16, 8, 2, 
     "\001\025\024\124\121\125\125\105\105\225\226\120\025\131\131\225"
     "\145\226\231\140\131\152\245\225\126\006\102\124\000\006\100\000"
     "\000\006\100\000\000\006\100\000\000\006\100\000\000\006\124\000"
     "\000\006\124\000\000\006\144\000\000\006\144\000\000\001\220\000" }, 
-  { "ur_angle", 148, 12, 12, 10, 1, 
+  { "ur_angle", NULL, 148, 12, 12, 10, 1, 
     "\125\125\125\152\252\251\152\252\251\125\125\151\000\000\151\000"
     "\000\151\000\000\151\000\000\151\000\000\151\000\000\151\000\000"
     "\151\000\000\125" }, 
-  { "watch", 150, 16, 16, 15, 9, 
+  { "watch", IDC_WAIT, 150, 16, 16, 15, 9, 
     "\006\252\251\000\006\252\251\000\006\252\251\000\032\252\252\100"
     "\151\126\126\220\245\126\125\245\225\126\125\152\225\132\225\152"
     "\225\132\225\152\225\145\125\152\245\225\125\245\151\125\126\220"
     "\032\252\252\100\006\252\251\000\006\252\251\000\006\252\251\000" }, 
-  { "xterm", 152, 9, 16, 4, 8, 
+  { "xterm", IDC_IBEAM, 152, 9, 16, 4, 8, 
     "\125\025\132\232\225\152\124\026\120\001\220\000\144\000\031\000"
     "\006\100\001\220\000\144\000\031\000\006\100\005\224\025\251\126"
     "\246\245\124\125" }, 
diff -udpr gtk+-2.6.7_/gdk-pixbuf/gdk-pixbuf-private.h gtk+-2.6.7/gdk-pixbuf/gdk-pixbuf-private.h
--- gtk+-2.6.7_/gdk-pixbuf/gdk-pixbuf-private.h	2004-11-16 06:01:57.000000000 +0300
+++ gtk+-2.6.7/gdk-pixbuf/gdk-pixbuf-private.h	2010-02-14 21:04:13.000000000 +0300
@@ -97,9 +97,9 @@ GdkPixbuf *_gdk_pixbuf_generic_image_loa
 GdkPixbufFormat *_gdk_pixbuf_get_format (GdkPixbufModule *image_module);
 
 #ifdef USE_GMODULE
-#define MODULE_ENTRY(type,function) function
+#define MODULE_ENTRY(type,function) __declspec(dllexport) function
 #else
-#define MODULE_ENTRY(type,function) _gdk_pixbuf__ ## type ## _ ## function
+#define MODULE_ENTRY(type,function) __declspec(dllexport) _gdk_pixbuf__ ## type ## _ ## function
 #endif
 
 #endif /* GDK_PIXBUF_ENABLE_BACKEND */
diff -udpr gtk+-2.6.7_/gtk/gtkfilesel.c gtk+-2.6.7/gtk/gtkfilesel.c
--- gtk+-2.6.7_/gtk/gtkfilesel.c	2005-04-07 08:45:30.000000000 +0400
+++ gtk+-2.6.7/gtk/gtkfilesel.c	2010-02-14 21:04:13.000000000 +0300
@@ -2070,7 +2070,8 @@ win32_gtk_add_drives_to_dir_list (GtkLis
   while (*textPtr != '\0')
     {
       /* Ignore floppies (?) */
-      if (GetDriveType (textPtr) != DRIVE_REMOVABLE)
+// We need to see flash drives too - WJ
+//      if (GetDriveType (textPtr) != DRIVE_REMOVABLE)
 	{
 	  /* Build the actual displayable string */
 	  g_snprintf (formatBuffer, sizeof (formatBuffer), "%c:\\", toupper (textPtr[0]));
diff -udpr gtk+-2.6.7_/modules/engines/ms-windows/msw_style.c gtk+-2.6.7/modules/engines/ms-windows/msw_style.c
--- gtk+-2.6.7_/modules/engines/ms-windows/msw_style.c	2005-03-21 01:40:58.000000000 +0300
+++ gtk+-2.6.7/modules/engines/ms-windows/msw_style.c	2010-02-14 21:04:13.000000000 +0300
@@ -1448,10 +1448,13 @@ draw_box (GtkStyle      *style,
     }
   else if (detail && strcmp (detail, "menuitem") == 0) {
     shadow_type = GTK_SHADOW_NONE;
+#if 0
+    /* don't work with Vista */
       if (xp_theme_draw (window, XP_THEME_ELEMENT_MENU_ITEM, style, x, y, width, height, state_type, area))
         {
   		return;
         }
+#endif
   }
   else if (detail && !strcmp (detail, "trough"))
     {
